---
- name: Create fact with VM template contents
  ansible.builtin.set_fact:
    vm_body: "{{ lookup('template', 'vm-body.yml.j2') | from_yaml }}"
  loop: "{{ vm_configuration }}"
  register: templates
  loop_control:
    loop_var: vm

- name: Debug | Print Template lookup result
  ansible.builtin.debug:
    msg: "{{ item.ansible_facts.vm_body }}"
  when: debug_exec
  with_items: "{{ templates.results }}"

- name: Create a VM from a template
  ansible.builtin.uri:
    url: "{{ nutanix_api_v3 }}/vms"
    body:
      "{{ template.ansible_facts.vm_body }}"
    method: POST
    validate_certs: 'no'
    body_format: json
    headers:
      Cookie: "{{ session_cookie }}"
    status_code: 202
  register: json_create_result
  with_items: "{{ templates.results }}"
  loop_control:
    loop_var: template

- name: Debug | Print VM creation result
  ansible.builtin.debug:
    var: json_create_result
  when: debug_exec

#- name: Debug | Display VM creation response
#  ansible.builtin.debug:
#    msg: "{{ item.json.metadata.uuid }}"
#  when: debug_exec
#  with_items: "{{ json_create_result.results }}"
#  no_log: true

- name: Register the created vm uuid's for future use
  ansible.builtin.set_fact:
    #vm_uuid: "{{ json_create_result | json_query('results[*].json.metadata.uuid') }}"
    vm_uuid: "{{ item.json.metadata.uuid }}"
  with_items: "{{ json_create_result.results }}"
  no_log: true

- name: Debug | Print VM uuids
  ansible.builtin.debug:
    var: vm_uuid
  when: debug_exec
